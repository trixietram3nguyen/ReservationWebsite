
---------------------------------------------------
# Making a reservations
# Need to generate random string with letters and numbers for the confirmation code
import string
import random

# function to generate confirmation code
def id_generator(size=6, chars=string.ascii_lowercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))

# Function to add reservation into database
def addReservation(insert_tb, date, time, confirmation, name, size, email, combine_tb):
    tables.update({"table_number":insert_tb},{"$push":{"book_status":{"date":date,"time":time,"confirmation":confirmation,"name":name,"party_size":size,"email":email,"combined_table":combine_tb}}})
    # print("Reservation inserted!")

# Function to find out the table number to add the reservation, return the table will be insert and combine
def tableInsert(tb_num, tb_size, party_sz,pairs):
    #table[0] is the insert table, table[1] is combine table
    tb_insert = [0,0]
    #list to store which table can be combine
    available = []
    
    # Check the party size to see if table will need to be combine
    if party_sz >= 8:
        # table of 8 or up -> need to be combine
        print("\nNeed table for 8-12")

        # loop to find what tables are available to combine
        for p in pairs:
            if (p[0] in tb_num and p[1] in tb_num):
                available.append([p[0],p[1],p[2]])
        print("\nTables that available to combine are: ")
        print(available)

        # Check to see if length of available list is equal to 0
        if len(available) == 0:
            # Yes -> No table are able to combine
            print("\nNo tables can be combine at this time. No available for party size you choose")
            tb_insert[0] = 0
            tb_insert[1] = 0
        else:
            # There are tables available to combine
            # loop through the pairs list to find the pair of tables that can accommondate the desired size
            index = 0
            # Go through the list as if party size are bigger than the size of the one inside the list
            # Keep going until find one or until reach the end of the list
            while (party_sz > available[index][2]):
                index += 1
                # if index is equal to the length of the list -> the end of the list -> break out the loop
                if (index == len(available)):
                    break
            
            # then take in that index
            # check to see if there is table still available
            if index < len(available):
                # table still available for that party size
                # use that index to get the insert table number and combine table number
                tb_insert[0] = available[index][0]
                tb_insert[1] = available[index][1]
    else:
        # party size less than 8, no table need to be combine, so tb_insert[1] will be 0 always
        tb_insert[1] = 0
        
        # loop through the table size array until find a table size that is >= party size
        index = 0
        while (party_sz > tb_size[index]):
            index += 1
            # if index is equal to the length of the list -> the end of the list -> break out the loop
            if (index == len(tb_size)):
                break
            
        
        # then take in that index
        # check to see if there is table still available
        if index < len(tb_size):
            # table still available for that party size
            # use that index to get the table number, then store in tb_insert[0]
            tb_insert[0] = tb_num[index]
    
    return tb_insert



# info to book reservation
table_num = []     #store the available table(s) to reserve
table_size = []    #store the side of the table(s) accordingly
party_size = 9
confirmation = id_generator()    #random confirmation generated
time = ["7:15pm", "7:30pm","7:45pm","8:00pm"]       #list of time that need to be reserve
date = "11/26/2021"
name = "TT"
email = "TW"

# pairs to store the tables that can be combine and the size of it [0],[1] tables number, [2] combined size
pairs = [[3,5,8],[4,6,8],[1,2,12],[7,8,12]]

# First, find out the list of table(s) that is available
# Check if date picked has been reserved
query = tables.count({"book_status.date":date})
if query != 0:
    # Yes -> Check if time picked has been reserve
    # print("\nThere are some reservations booked with this date. Check for time!")
    time_booked = 0
    for t in time:
        query = tables.count({"book_status.time":t})
        time_booked += query
    print(time_booked)

    # check if time picked is reserved in the system
    if (time_booked != 0):
        # time_booked not equal 0 -> the picked time is already in the system
        # print("\nCheck for available tables during this time!")
        all_tb = []
        tb_info = []
        query = tables.find({},{"table_number":1,"table_size":1,"book_status.date":1,"book_status.time":1,"_id":0}).sort("table_size")
        for result in query:
            all_tb.append(result)

        # Get the list of available tables
        for table_info in all_tb:
            table_number = table_info['table_number']
            table_sz = table_info['table_size']
            status = table_info['book_status']
            date_available = True
            time_available = True
            for s in status:
                reserved_time = s['time']
                reserved_date = s['date']
                
                if date == reserved_date:
                    # That table has the same date reserve so check the time
                    for t in time:
                        if t in reserved_time:
                            time_available = False
                            date_available = False
                            break
                
            if time_available or date_available:
                # That table is available to reserve
                # Add to table_num and table_size list
                if table_number not in table_num:
                    table_num.append(table_number)
                    table_size.append(table_sz)
                   
        print("\nPrint out the list of tables")
        print(table_num)
    else:
        # No -> Make the reservations, insert into database
        # print("\nThis time is available to book!")
        # No time in the array were book at all, so we can choose anytime from the array to retrieve the available tables
        query = tables.find({"book_status.date":{"$ne":time[0]}},{"table_number":1,"table_size":1,"_id":0}).sort("table_size")
        for result in query:
            table_num.append(result['table_number'])
            table_size.append(result['table_size'])
        
        print("\nPrint out the list of tables")
        print(table_num)
else:
    # No -> Find the available tables
    # print("\nThis date is available to book")
    query = tables.find({"book_status.date":{"$ne":date}},{"table_number":1,"table_size":1,"_id":0}).sort("table_size")
    for result in query:
        table_num.append(result['table_number'])
        table_size.append(result['table_size'])
        
    print("\nPrint out the list of available table(s)")
    print(table_num)
    # print(table_size)

# Then start making the reservation
# If there is nothing in table_num list -> no table available
if len(table_num) == 0:
    print("\nNo more availability. Pick another time/date.")
else:
    # Find out what table best fit for the party size
    best_table = tableInsert(table_num, table_size, party_size, pairs)
    print("\nThe table will be reserve is " + str(best_table[0]) + " and " + str(best_table[1]))

    # Make the reservation
    # If best_table[1] is 0 -> table will need to be combine or non of the table can be reserve
    if (best_table[1] == 0):
        # Yes -> No table need to be combine
        # Check if best_table[0] is 0
        if (best_table[0] == 0):
            # Yes -> No more table to reserve
            print("\nNo more table is available to reserve. Please pick another time/date.")
        else:
            # No -> There are table to reserve
            # Call the addReservation function once
            print("\nAdd reservation for table " + str(best_table[0]))
            # Reserving the table
            addReservation(best_table[0], date, time, confirmation, name, party_size, email, best_table[1])
    else:
        # No -> Table need to be combine
        # Call the addReservation function twice, flip the table insert and table combine for the second call
        print("\nAdd reservation for table " + str(best_table[0]))
        # Reserving the table
        addReservation(best_table[0], date, time, confirmation, name, party_size, email, best_table[1])
        # Reserving the table
        print("\nAdd reservation for table " + str(best_table[1]))
        addReservation(best_table[1], date, time, confirmation, name, party_size, email, best_table[0])

