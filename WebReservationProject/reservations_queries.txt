# Making reservation...
# Need to generate random string with letters and numbers for the confirmation code
import string
import random

# function to generate confirmation code
def id_generator(size=6, chars=string.ascii_lowercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))

# Function to add reservation into database
def addReservation(insert_tb, date, time, confirmation, name, size, email, combine_tb):
    tables.update({"table_number":insert_tb},{"$push":{"book_status":{"date":date,"time":time,"confirmation":confirmation,"name":name,"party_size":size,"email":email,"combined_table":combine_tb}}})
    print("Reservation inserted!")

# Function to find out the table number to add the reservation, return the table will be insert and combine
def tableInsert(tb_num, tb_size, party_sz,pairs):
    # print("Length")
    # print(len(tb_size))
    #array of table, table[0] is the insert table, table[1] is combine table
    tb_insert = [0,0]
    available = []
    
    if party_sz >= 8:
        print("Need table for 8-12")
        # tb_insert[0] = 0
        # tb_insert[1] = 1
        print(pairs)

        # loop to find what tables are available to combine
        for p in pairs:
            if (p[0] in tb_num and p[1] in tb_num):
                print("Adding to available")
                print(p[0])
                print(p[1])
                available.append([p[0],p[1],p[2]])
        print(available)

        if len(available) == 0:
            # If there is nothing added in available, meaning no table are able to combine
            print("No tables can be combine at this time")
            print("There are no available for party size you choose")
            tb_insert[0] = 0
            tb_insert[1] = 0
        else:
            # There are tables available to combine
            # loop through the pairs list to find the pair of tables that can accommondate the desired size
            index = 0
            print(available[index][2])
            print(party_sz)
            while (party_sz > available[index][2]):
                index += 1
                print("INDEX2")
                print(index)
                if (index == len(available)):
                    break
            
            # then take in that index
            # check to see if there is table still available
            if index >= len(available):
                # index out of range no more table for that party size
                print("There are no available for party size you choose")
                tb_insert[0] = 0
            else:
                # table still available for that party size
                # use that index to get the insert table number and combine table number
                print("INDEX")
                print(index)
                tb_insert[0] = available[index][0]
                tb_insert[1] = available[index][1]
    else:
        # party size less than 8, no table need to be combine, so tb_insert[1] will be 0 always
        tb_insert[1] = 0
        
        # loop through the table size array until find a table size that is >= party size
        index = 0
        while (party_sz > tb_size[index]):
            index += 1
            print("INDEX2")
            print(index)
            if (index == len(tb_size)):
                break
            
        
        # then take in that index
        # check to see if there is table still available
        if index >= len(tb_size):
            # index out of range no more table for that party size
            print("There are no available for party size you choose")
            tb_insert[0] = 0
        else:
            # table still available for that party size
            # use that index to get the table number, then store in tb_insert[0]
            tb_insert[0] = tb_num[index]
    
    print("This table will be reserve")
    print(tb_insert)
    return tb_insert

# info to book reservation
table_num = []
table_size = []
party_size = 5
confirmation = id_generator()
time = ["8:00pm","8:15pm","8:30pm","8:45pm","8:00pm","8:15pm"]
date = "11/29/2021"
name = "TT"
email = "TW"

# pairs to store the tables that can be combine and the size of it [0],[1] tables number, [2] combined size
pairs = [[3,5,8],[4,6,8],[1,2,12],[7,8,12]]

# Check if date picked has been reserve
query = tables.count({"book_status.date":date})
# print(query)
if query != 0:
    # Yes -> Check if time picked has been reserve
    print("There are some reservations booked with this date. Check for time!")
    time_booked = 0
    for t in time:
        #print(t)
        query = tables.count({"book_status.time":t})
        #print(query)
        time_booked += query
    print(time_booked)

    # check if time picked is reserved in the system
    if (time_booked != 0):
        # time_booked not equal 0 -> the picked time is already in the system
        print("Check for available tables during this time!")
        all_tb = []
        tb_info = []
        # print("All tables have reservations on " + date + " and " + time[0])
        query = tables.find({},{"table_number":1,"table_size":1,"book_status.date":1,"book_status.time":1,"_id":0}).sort("table_size")
        for result in query:
            #print(result)
            #print(type(result))
            all_tb.append(result)

        # Get the list of available tables
        for table_info in all_tb:
            table_number = table_info['table_number']
            table_sz = table_info['table_size']
            status = table_info['book_status']
            # print(tb_info)
            # print("I'M HERE!!!!!\n")
            # status = tb_info['book_status']
            print(table_number)
            print(table_sz)
            print(status)
            date_available = True
            time_available = True
            for s in status:
                reserved_time = s['time']
                reserved_date = s['date']
                print(reserved_date)
                print(reserved_time)
                
                if date == reserved_date:
                    # That table has the same date reserve so check the time
                    for t in time:
                        if t in reserved_time:
                            time_available = False
                            date_available = False
                            break
                
            if time_available or date_available:
                # That table is available to reserve
                # Add to table_num and table_size list
                if table_number not in table_num:
                    table_num.append(table_number)
                    table_size.append(table_sz)

        print("Print out the list of tables")
        print(table_num)
        print(table_size)
        print("I'M HERE^^^^^^^^^\n")
    else:
        # No -> Make the reservations, insert into database
        print("This time is available to book!")
        print("Making reservation...")
        # No time in the array were book at all, so we can choose anytime from the array to retrieve the available tables
        query = tables.find({"book_status.date":{"$ne":time[0]}},{"table_number":1,"table_size":1,"_id":0}).sort("table_size")
        for result in query:
        #print(result)
            table_num.append(result['table_number'])
            table_size.append(result['table_size'])
        
        print("Print out the list of tables")
        print(table_num)
        print(table_size)
else:
    # No -> Find the available tables
    print("This reservation can be book")
    query = tables.find({"book_status.date":{"$ne":date}},{"table_number":1,"table_size":1,"_id":0}).sort("table_size")
    for result in query:
        #print(result)
        table_num.append(result['table_number'])
        table_size.append(result['table_size'])
        
    print("Print out the list of tables")
    print(table_num)
    print(table_size)

# After find out what table available, proceed to picking the optimal table to reserve and making the reservation
if len(table_num) == 0:
    print("No more availability. Pick another time/date.")
else:
    # Find out what table best fit for the party size
    best_table = tableInsert(table_num, table_size, party_size, pairs)
    print("The table will be reserve is")
    print(best_table)

    # # If best_table[1] is 0 -> table will need to be combine or non of the table can be reserve
    # if (best_table[1] == 0):
    #     # Yes -> Check if best_table[0] is 0
    #     if (best_table[0] == 0):
    #         # Yes -> No more table to reserve
    #         print("Please pick another time/date.")
    #     else:
    #         # No -> There are table to reserve
    #         # Call the addReservation function once
    #         print("Add reservation for table " + str(best_table[0]))
    #         # Reserving the table
    #         addReservation(best_table[0], date, time, confirmation, name, party_size, email, best_table[1])
    # else:
    #     # No -> Table need to be combine
    #     # Call the addReservation function twice, flip the table insert and table combine for the second call
    #     print("Add reservation for table " + str(best_table[0]))
    #     # Reserving the table
    #     addReservation(best_table[0], date, time, confirmation, name, party_size, email, best_table[1])
    #     # Reserving the table
    #     print("Add reservation for table " + str(best_table[1]))
    #     addReservation(best_table[1], date, time, confirmation, name, party_size, email, best_table[0])